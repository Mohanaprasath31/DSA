class SinglyLinkedList{
    private static class Node{
	    int data;
		Node next;
	Node(int data){
	    this.data=data;
		}
    }
		private Node head;
		private Node tail;
		private int size;
	public void insertAtHead(int data){
	    Node newNode =new Node(data);
		if(head==null){
			head = tail= newNode;
		}else{
			newNode.next=head;
			head=newNode;
		}
		size++;
	}
	public void insertAtTail(int data){
		Node newNode = new Node(data);
		if(tail==null){
			head=tail=newNode;
		}else{
			tail.next=newNode;
			tail=newNode;
		}
		size++;
	}
	public void insertAtPosition(int index,int data){
		if(index<0 || index > size){
			System.out.println("Invalid position");
			return;
		}
		if(index==0){
			insertAtHead(data);
		}
		else if(index == size){
			insertAtTail(data);
		}
		else{
			Node newNode=new Node(data);
			Node prev=head;
			for(int i=0;i<index-1;i++){
				prev=prev.next;
				prev.next=newNode;
				size++;
			}
		}
	}
		public void deleteAtHead(){
		if(head==null){
			System.out.println("List empty");
			return;
		}
		head=head.next;
		if(head==null){
			tail=null;
		}
			size--;
		}
		public void deleteAtTail(){
		if(tail==null){
			System.out.println("List empty");
			return;
		}
		if(head==tail){
			head=tail=null;
		}else{
			Node current=head;
			while(current.next !=tail){
				current=current.next;
			}
			current.next=null;
			tail=current;
			}size++;
		}
		
		public void deleteAtPosition(int index){
		if(index<0 || index >=size){
			System.out.println("Invalid position");
			return;
		}
		if(index==0){
			deleteAtHead();
		}
		else if(index == size-1){
			deleteAtTail();
		}
		else{
			Node prev=head;
			for(int i=0;i<index-1;i++){
				prev=prev.next;
				}
				prev.next=prev.next.next;
				size--;
			}
		}
	    public int Search(int key){
			Node current=head;
			int index=0;
			while(current !=null){
				if(current.data==key)return index;
					current=current.next;
					index++;
			}
				return -1;
		}
        public void display(){
                Node current=head;
                System.out.println("List:");
                while(current !=null){
                    System.out.print(current.data +"->");
                current=current.next;
				}
            System.out.println("Null");
		}
        public int getsize(){
                return size;
		}
         public boolean isEmpty(){
            return size == 0;
		}
    public static void main(String[] args){
            SinglyLinkedList list= new SinglyLinkedList();
			list.insertAtHead(10);
			list.insertAtPosition(1,15);
			list.insertAtTail(20);
			list.display();
			list.deleteAtHead();
			list.display();
			list.deleteAtTail();
			list.display();
			list.insertAtHead(20);
			list.insertAtTail(30);
			list.insertAtPosition(1,50);
			list.display();
			int pos=list.Search(30);
			System.out.println("position of 30:"+(pos>=0? pos:"not found"));
            list.display();	
	}
}	
			
----------------------------------------------------------------------
