import java.util.Stack;
class hello{
    public static void main(String args[]){
        Stack<Integer> St = new Stack<Integer>();
        St.push(10);
        St.push(20);
        St.push(30);
        St.push(40);
        System.out.println(St);
        int num = St.pop();
        System.out.println(num);
        System.out.println(St);
        System.out.println(St.search(20));
         System.out.println(St.peek());
        System.out.println(St.isEmpty());
    }
}
-------------------------------------------------------------------------------------------
import java.util.Scanner;
class Stack {
    private int[] stack;
    private int top;
    private int capacity;

    Stack(int size) {
        capacity = size;
        stack = new int[capacity];
        top = -1;
    }
    void push(int data) {
        if (isFull()) {
            System.out.println("Stack Overflow!");
            return;
        }
        stack[++top] = data;
        System.out.println(data + " pushed into stack.");
    }
    void pop() {
        if (isEmpty()) {
            System.out.println("Stack Underflow!");
            return;
        }
        System.out.println(stack[top--] + " popped from stack.");
    }

    void peek() {
        if (isEmpty()) {
            System.out.println("Stack is empty.");
            return;
        }
        System.out.println("Top element is: " + stack[top]);
    }
    boolean isEmpty() {
        return top == -1;
    }
    boolean isFull() {
        return top == capacity - 1;
    }
}
public class StackUsingArray {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Stack stack = new Stack(5);
        stack.push(10);
        stack.push(20);
        stack.push(30);
        stack.peek();
        stack.pop();
        stack.peek();
        sc.close();
    }
}
--------------------------------------------------------------------
import java.util.Scanner;
class LinearQueue {
    private int[] queue;
    private int front, rear, capacity;

    LinearQueue(int size) {
        capacity = size;
        queue = new int[capacity];
        front = 0;
        rear = -1;
    }

    void enqueue(int data) {
        if (rear == capacity - 1) {
            System.out.println("Queue Overflow!");
            return;
        }
        queue[++rear] = data;
        System.out.println(data + " enqueued.");
    }
    void dequeue() {
        if (isEmpty()) {
            System.out.println("Queue Underflow!");
            return;
        }
        System.out.println(queue[front++] + " dequeued.");
    }

    void peek() {
        if (isEmpty()) {
            System.out.println("Queue is empty.");
            return;
        }
        System.out.println("Front element is: " + queue[front]);
    }
    boolean isEmpty() {
        return front > rear;
    }
}
public class LinearQueueUsingArray {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        LinearQueue queue = new LinearQueue(5);
        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);
        queue.peek();
        queue.dequeue();
        queue.peek();
        sc.close();
    }
}
------------------------------------------------------------------------------
import java.util.Scanner;
class CircularQueue {
    private int[] queue;
    private int front, rear, size, capacity;
    CircularQueue(int size) {
        capacity = size;
        queue = new int[capacity];
        front = rear = -1;
        this.size = 0;
    }
    void enqueue(int data) {
        if (isFull()) {
            System.out.println("Circular Queue Overflow!");
            return;
        }
        if (front == -1) front = 0; // first element
        rear = (rear + 1) % capacity;
        queue[rear] = data;
        size++;
        System.out.println(data + " enqueued.");
    }
    void dequeue() {
        if (isEmpty()) {
            System.out.println("Circular Queue Underflow!");
            return;
       }
        System.out.println(queue[front] + " dequeued.");
        front = (front + 1) % capacity;
        size--;
        if (size == 0) front = rear = -1; // reset
    }
    void peek() {
        if (isEmpty()) {
            System.out.println("Circular Queue is empty.");
            return;
        }
        System.out.println("Front element is: " + queue[front]);
    }
    boolean isEmpty() {
        return size == 0;
    }
    boolean isFull() {
        return size == capacity;
    }
}
public class CircularQueueUsingArray {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        CircularQueue cq = new CircularQueue(5);

        cq.enqueue(10);
        cq.enqueue(20);
        cq.enqueue(30);
        cq.dequeue();
        cq.enqueue(40);
        cq.enqueue(50);
        cq.enqueue(60); // This will wrap around
        cq.peek();
        sc.close();
    }
}
----------------------------------------------------------------------------
